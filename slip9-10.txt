Slip 9
Q.1) Write a program to implement optimal binary search tree and also calculate the best-case complexity.
Ans:
#include <iostream>
#include <vector>
#include <climits>
#include <numeric>

using namespace std;

// Function to calculate the optimal cost of the Binary Search Tree
int optimalBST(const vector<int>& keys, const vector<int>& freq, int n) {
    // Create a table to store results of subproblems
    vector<vector<int>> cost(n, vector<int>(n, 0));

    // Fill the diagonal of the cost matrix (one node)
    for (int i = 0; i < n; i++) {
        cost[i][i] = freq[i];
    }

    // Calculate the cost for chains of length 2 to n
    for (int chainLen = 2; chainLen <= n; chainLen++) {
        for (int i = 0; i < n - chainLen + 1; i++) {
            int j = i + chainLen - 1;
            cost[i][j] = INT_MAX;

            // Try making every node in the current chain the root
            for (int r = i; r <= j; r++) {
                // Calculate cost of left and right subtrees
                int c = (r > i ? cost[i][r - 1] : 0) + (r < j ? cost[r + 1][j] : 0);
                // Add the total frequency in the current chain to the cost
                c += accumulate(freq.begin() + i, freq.begin() + j + 1, 0);

                // Update the minimum cost
                cost[i][j] = min(cost[i][j], c);
            }
        }
    }

    return cost[0][n - 1];
}

int main() {
    int n;
    cout << "Enter the number of keys: ";
    cin >> n;
    
    vector<int> keys(n);
    vector<int> freq(n);

    cout << "Enter the keys:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> keys[i];
    }

    cout << "Enter the frequencies of the keys:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> freq[i];
    }

    // Calculate and print the minimum cost of the optimal BST
    int minCost = optimalBST(keys, freq, n);
    cout << "The minimum cost of the optimal binary search tree is: " << minCost << endl;

    return 0;
}


Q.2) Write a program to implement Sum of Subset by Backtracking
Ans:
#include <iostream>
#include <vector>
using namespace std;

// Function to print the subset
void printSubset(const vector<int>& subset) {
    cout << "{ ";
    for (int num : subset) {
        cout << num << " ";
    }
    cout << "}" << endl;
}

// Backtracking function to find subsets that sum to a given sum
void findSubsetSum(const vector<int>& set, vector<int>& subset, int index, int sum, int target) {
    if (sum == target) {
        printSubset(subset);
        return;
    }

    if (index == set.size() || sum > target) {
        return;
    }

    // Include the current element
    subset.push_back(set[index]);
    findSubsetSum(set, subset, index + 1, sum + set[index], target);

    // Exclude the current element
    subset.pop_back();
    findSubsetSum(set, subset, index + 1, sum, target);
}

int main() {
    int n, target;
    
    cout << "Enter the number of elements in the set: ";
    cin >> n;

    vector<int> set(n);
    cout << "Enter the elements of the set: ";
    for (int i = 0; i < n; i++) {
        cin >> set[i];
    }

    cout << "Enter the target sum: ";
    cin >> target;

    vector<int> subset;
    cout << "Subsets that sum to " << target << " are:" << endl;
    findSubsetSum(set, subset, 0, 0, target);

    return 0;
}

*****************************************************************************************************************

Slip 10 
Q.1) Write a program to implement Huffman Code using greedy methods 
Ans:
#include <iostream>
#include <queue>
#include <vector>
#include <unordered_map>
#include <string>

using namespace std;

// Define a structure to represent a node in the Huffman Tree
struct Node {
    char data;
    int freq;
    Node* left;
    Node* right;
    
    Node(char data, int freq) {
        this->data = data;
        this->freq = freq;
        left = right = nullptr;
    }
};

// Compare function to help with priority queue sorting
struct compare {
    bool operator()(Node* l, Node* r) {
        return l->freq > r->freq;
    }
};

// Recursive function to generate the Huffman codes
void generateCodes(Node* root, string str, unordered_map<char, string>& huffmanCode) {
    if (root == nullptr) return;
    
    if (!root->left && !root->right) {
        huffmanCode[root->data] = str;
    }
    
    generateCodes(root->left, str + "0", huffmanCode);
    generateCodes(root->right, str + "1", huffmanCode);
}

// Function to implement Huffman Coding
void huffmanCoding(const string& input) {
    unordered_map<char, int> freq;
    
    // Step 1: Calculate frequency of each character in the input string
    for (char ch : input) {
        freq[ch]++;
    }
    
    // Step 2: Create a priority queue to build the Huffman tree
    priority_queue<Node*, vector<Node*>, compare> minHeap;
    
    for (auto& pair : freq) {
        minHeap.push(new Node(pair.first, pair.second));
    }
    
    // Step 3: Build the Huffman Tree
    while (minHeap.size() > 1) {
        Node* left = minHeap.top();
        minHeap.pop();
        Node* right = minHeap.top();
        minHeap.pop();
        
        Node* internalNode = new Node('$', left->freq + right->freq);
        internalNode->left = left;
        internalNode->right = right;
        
        minHeap.push(internalNode);
    }
    
    // Step 4: Generate Huffman codes from the tree
    Node* root = minHeap.top();
    unordered_map<char, string> huffmanCode;
    generateCodes(root, "", huffmanCode);
    
    // Step 5: Print the Huffman codes
    cout << "Huffman Codes for the given input:" << endl;
    for (auto& pair : huffmanCode) {
        cout << pair.first << ": " << pair.second << endl;
    }
}

int main() {
    string input;
    cout << "Enter the input string: ";
    getline(cin, input);
    
    huffmanCoding(input);
    
    return 0;
}

Q-2) Write a program to solve 4 Queens Problem using Backtracking
Ans:
#include <iostream>
#include <vector>

using namespace std;

const int N = 4; // Size of the board (4x4)

// Function to check if it's safe to place a queen at board[row][col]
bool isSafe(vector<vector<int>>& board, int row, int col) {
    // Check the column
    for (int i = 0; i < row; i++) {
        if (board[i][col] == 1) {
            return false;
        }
    }
    
    // Check the upper left diagonal
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    // Check the upper right diagonal
    for (int i = row, j = col; i >= 0 && j < N; i--, j++) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    return true;
}

// Backtracking function to solve the 4 Queens problem
bool solveNQueens(vector<vector<int>>& board, int row) {
    if (row == N) {
        // All queens are placed successfully
        return true;
    }

    for (int col = 0; col < N; col++) {
        // Check if it's safe to place the queen at (row, col)
        if (isSafe(board, row, col)) {
            board[row][col] = 1; // Place the queen

            // Recur to place the next queen
            if (solveNQueens(board, row + 1)) {
                return true;
            }

            // If placing queen in (row, col) doesn't lead to a solution, backtrack
            board[row][col] = 0;
        }
    }

    return false; // If no position is found
}

// Function to print the board
void printBoard(vector<vector<int>>& board) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << (board[i][j] == 1 ? "Q" : ".") << " ";
        }
        cout << endl;
    }
}

int main() {
    vector<vector<int>> board(N, vector<int>(N, 0)); // Create a 4x4 board initialized with 0
    
    if (solveNQueens(board, 0)) {
        cout << "Solution to the 4 Queens Problem:" << endl;
        printBoard(board);
    } else {
        cout << "No solution exists" << endl;
    }

    return 0;
}
