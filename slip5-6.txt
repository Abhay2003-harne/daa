Slip 5
Q.1) Write a program for the Implementation of Kruskal’s algorithm to find minimum cost spanning tree.
Ans:
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent a graph edge
struct Edge {
    int u, v, weight;
};

// Structure to represent a subset for union-find
struct Subset {
    int parent, rank;
};

// Function to find the subset of an element using path compression
int find(Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

// Function to do union of two subsets
void Union(Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

// Function to implement Kruskal's algorithm to find MST
void Kruskal(int V, vector<Edge>& edges) {
    // Step 1: Sort all edges in increasing order of their weights
    sort(edges.begin(), edges.end(), [](Edge a, Edge b) {
        return a.weight < b.weight;
    });

    // Create V subsets for union-find
    Subset *subsets = new Subset[V];
    for (int v = 0; v < V; ++v) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    // Result to store the MST
    vector<Edge> result;

    // Step 2: Iterate through edges and apply union-find
    for (Edge e : edges) {
        int x = find(subsets, e.u);
        int y = find(subsets, e.v);

        // If including this edge does not cause a cycle
        if (x != y) {
            result.push_back(e);
            Union(subsets, x, y);
        }
    }

    // Step 3: Output the MST
    cout << "Edges in the Minimum Spanning Tree: \n";
    int minCost = 0;
    for (Edge e : result) {
        cout << e.u << " -- " << e.v << " == " << e.weight << endl;
        minCost += e.weight;
    }
    cout << "Minimum Cost of the Spanning Tree: " << minCost << endl;

    delete[] subsets;
}

int main() {
    int V, E;
    cout << "Enter number of vertices: ";
    cin >> V;
    cout << "Enter number of edges: ";
    cin >> E;

    vector<Edge> edges(E);

    cout << "Enter edges (u v weight): \n";
    for (int i = 0; i < E; i++) {
        cin >> edges[i].u >> edges[i].v >> edges[i].weight;
    }

    Kruskal(V, edges);

    return 0;
}
Enter number of vertices: 4
Enter number of edges: 5
Enter edges (u v weight): 
0 1 10
0 2 6
0 3 5
1 3 15
2 3 4
Edges in the Minimum Spanning Tree: 
2 -- 3 == 4
0 -- 3 == 5
0 -- 1 == 10
Minimum Cost of the Spanning Tree: 19

Q.2) Write a program to implement Huffman Code using greedy methods and also calculate the best case and worst-case complexity.
Ans:
#include <iostream>
#include <queue>
#include <vector>
#include <unordered_map>

using namespace std;

// Structure to represent a node in the Huffman Tree
struct Node {
    char data;
    int freq;
    Node *left, *right;

    Node(char data, int freq) {
        this->data = data;
        this->freq = freq;
        left = right = nullptr;
    }
};

// Comparison function to be used by priority queue (min heap)
struct compare {
    bool operator()(Node* l, Node* r) {
        return l->freq > r->freq;
    }
};

// Function to build the Huffman Tree
Node* buildHuffmanTree(const unordered_map<char, int>& freq) {
    priority_queue<Node*, vector<Node*>, compare> minHeap;

    // Create leaf nodes and add them to the min heap
    for (auto pair : freq) {
        minHeap.push(new Node(pair.first, pair.second));
    }

    // Build the tree
    while (minHeap.size() != 1) {
        Node *left = minHeap.top();
        minHeap.pop();
        Node *right = minHeap.top();
        minHeap.pop();

        // Create a new internal node with the sum of frequencies
        Node *top = new Node('$', left->freq + right->freq);
        top->left = left;
        top->right = right;

        // Add the new node to the min heap
        minHeap.push(top);
    }

    return minHeap.top();
}

// Function to generate Huffman codes from the Huffman tree
void generateHuffmanCodes(Node* root, string str, unordered_map<char, string>& huffmanCodes) {
    if (!root) return;

    // If it's a leaf node, store the code
    if (!root->left && !root->right) {
        huffmanCodes[root->data] = str;
    }

    // Recur for left and right subtrees
    generateHuffmanCodes(root->left, str + "0", huffmanCodes);
    generateHuffmanCodes(root->right, str + "1", huffmanCodes);
}

// Function to display the Huffman codes
void displayHuffmanCodes(const unordered_map<char, string>& huffmanCodes) {
    cout << "Character Huffman Codes:\n";
    for (auto pair : huffmanCodes) {
        cout << pair.first << ": " << pair.second << endl;
    }
}

int main() {
    string text;
    cout << "Enter the text: ";
    cin >> text;

    unordered_map<char, int> freq;
    // Calculate frequency of each character
    for (char c : text) {
        freq[c]++;
    }

    // Build the Huffman Tree
    Node* root = buildHuffmanTree(freq);

    // Generate Huffman codes
    unordered_map<char, string> huffmanCodes;
    generateHuffmanCodes(root, "", huffmanCodes);

    // Display Huffman Codes
    displayHuffmanCodes(huffmanCodes);

    return 0;
}

****************************************************************************************************

Slip 6 
Q-1) Write a program for the Implementation of Prim’s algorithm to find minimum cost spanning tree.
Ans:
#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

// Edge structure to represent an edge between two vertices with a weight
struct Edge {
    int u, v, weight;
    
    Edge(int u, int v, int weight) : u(u), v(v), weight(weight) {}
};

// Comparator for priority queue to prioritize edges with the smallest weight
struct Compare {
    bool operator()(Edge const& e1, Edge const& e2) {
        return e1.weight > e2.weight; // min-heap
    }
};

// Function to implement Prim's Algorithm
void prim(int vertices, vector<vector<int>>& graph) {
    vector<bool> inMST(vertices, false); // To track whether a vertex is in the MST
    priority_queue<Edge, vector<Edge>, Compare> pq; // Min-heap to store edges
    
    // Start with vertex 0
    inMST[0] = true;
    int mstCost = 0;
    vector<Edge> mstEdges;
    
    // Add all edges from vertex 0 to the priority queue
    for (int v = 1; v < vertices; ++v) {
        if (graph[0][v] != 0) {
            pq.push(Edge(0, v, graph[0][v]));
        }
    }

    // Iterate to find the MST
    while (!pq.empty()) {
        Edge edge = pq.top();
        pq.pop();
        
        int u = edge.u;
        int v = edge.v;
        int weight = edge.weight;
        
        if (inMST[v]) continue; // Skip if v is already in MST
        
        // Add edge to MST
        inMST[v] = true;
        mstCost += weight;
        mstEdges.push_back(edge);
        
        // Add all edges from vertex v to the priority queue
        for (int i = 0; i < vertices; ++i) {
            if (!inMST[i] && graph[v][i] != 0) {
                pq.push(Edge(v, i, graph[v][i]));
            }
        }
    }
    
    // Print the edges of the MST
    cout << "Edges in the Minimum Spanning Tree (MST):" << endl;
    for (auto& edge : mstEdges) {
        cout << edge.u << " -- " << edge.v << " == " << edge.weight << endl;
    }
    
    cout << "Minimum Cost of the Spanning Tree: " << mstCost << endl;
}

int main() {
    int vertices, edges;
    
    cout << "Enter the number of vertices: ";
    cin >> vertices;
    
    cout << "Enter the adjacency matrix for the graph (0 represents no edge):" << endl;
    
    vector<vector<int>> graph(vertices, vector<int>(vertices, 0));
    
    // Input the adjacency matrix
    for (int i = 0; i < vertices; ++i) {
        for (int j = 0; j < vertices; ++j) {
            cin >> graph[i][j];
        }
    }
    
    // Call the Prim’s Algorithm function
    prim(vertices, graph);

    return 0;
}

Q.2) Write a Program to find only length of Longest Common Subsequence.
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Function to find the length of Longest Common Subsequence
int lcsLength(const string& X, const string& Y) {
    int m = X.length();
    int n = Y.length();
    
    // Create a 2D DP array to store lengths of longest common subsequence
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
    
    // Fill the DP table
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (X[i - 1] == Y[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1; // Characters match
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]); // No match
            }
        }
    }
    
    // The length of the LCS will be in dp[m][n]
    return dp[m][n];
}

int main() {
    string X, Y;
    
    // Input two strings
    cout << "Enter the first string: ";
    cin >> X;
    cout << "Enter the second string: ";
    cin >> Y;
    
    // Call function to find the length of LCS
    int result = lcsLength(X, Y);
    
    // Output the length of LCS
    cout << "Length of Longest Common Subsequence: " << result << endl;
    
    return 0;
}
