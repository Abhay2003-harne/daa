Slip 1.
Q.1) Write a program to sort a list of n numbers in ascending order using selection sort and determine the time required to sort the elements
Ans : 
cpp
#include <iostream>
#include <vector>
#include <ctime>
#include <cstdlib>
using namespace std;

// Function to generate random numbers
vector<int> generateRandomArray(int n) {
    vector<int> arr(n);
    for (int i = 0; i < n; i++)
        arr[i] = rand() % 10000; // Random numbers up to 9999
    return arr;
}

// Selection Sort Function
void selectionSort(vector<int> &arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        int minIdx = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIdx])
                minIdx = j;
        }
        swap(arr[i], arr[minIdx]);
    }
}

// Main function
int main() {
    int n;
    cout << "Enter the number of elements to sort: ";
    cin >> n;

    // Generate random array
    vector<int> data = generateRandomArray(n);

    cout << "\nOriginal Array:\n";
    for (int i = 0; i < n; i++) {
        cout << data[i] << " ";
    }
    cout << "\n";

    // Measure time
    clock_t start = clock();
    selectionSort(data);
    clock_t end = clock();
    double time_taken = double(end - start) / CLOCKS_PER_SEC;

    // Output sorted array
    cout << "\nSorted Array (Ascending Order):\n";
    for (int i = 0; i < n; i++) {
        cout << data[i] << " ";
    }
    cout << "\n";

    // Output time taken
    cout << "\nTime taken to sort " << n << " elements using Selection Sort: " << time_taken << " seconds\n";

    return 0;
}
OUTPUT:
g++ program.cpp -o my_program
./my_program     # On Linux/macOS

g++ 1.cpp -o 1 && ./1


Q.2) Write a program to sort a given set of elements using the Quick sort method and determine the time required to sort the elements. Repeat the experiment for different values of n, the number of elements in the list to be sorted. The elements can be read from a file or can be generated using the random number generator.
Ans:
#include <iostream> 
#include <cstdlib> 
#include <ctime> 
#include <vector> 
#include <fstream> 
#include <chrono> 
 
using namespace std; 
using namespace std::chrono; 
 
// Quick Sort Function 
int partition(vector<int>& arr, int low, int high) { 
    int pivot = arr[high]; // last element as pivot 
    int i = low - 1; 
 
    for(int j = low; j < high; j++) { 
        if(arr[j] < pivot) { 
            i++; 
            swap(arr[i], arr[j]); 
        } 
    } 
 
    swap(arr[i + 1], arr[high]); 
    return i + 1; 
} 
 
void quickSort(vector<int>& arr, int low, int high) { 
    if(low < high) { 
        int pi = partition(arr, low, high); 
        quickSort(arr, low, pi - 1); 
        quickSort(arr, pi + 1, high); 
    } 
} 
 
// Generate Random Numbers 
void generateRandomNumbers(vector<int>& arr, int n) { 
    srand(time(0)); 
    for(int i = 0; i < n; ++i) { 
        arr.push_back(rand() % 100000); // values between 0 and 99999 
    } 
} 
 
// Read Numbers from File 
void readFromFile(vector<int>& arr, string filename) { 
    ifstream file(filename); 
    int value; 
    while(file >> value) { 
        arr.push_back(value); 
    } 
    file.close(); 
} 
 
int main() { 
    vector<int> arr; 
    int n, choice; 
 
    cout << "Enter number of elements: "; 
    cin >> n; 
 
    cout << "Choose input method:\n1. Random Numbers\n2. Read from file\nChoice: "; 
    cin >> choice; 
 
    if(choice == 1) { 
        generateRandomNumbers(arr, n); 
    } else if(choice == 2) { 
        string filename; 
        cout << "Enter file name: "; 
        cin >> filename; 
        readFromFile(arr, filename); 
        n = arr.size(); 
    } else { 
        cout << "Invalid choice.\n"; 
        return 1; 
    } 
 
    // Time Measurement 
    auto start = high_resolution_clock::now(); 
    quickSort(arr, 0, n - 1); 
    auto end = high_resolution_clock::now(); 
    auto duration = duration_cast<microseconds>(end - start); 
 
    cout << "\nTime taken by Quick Sort for " << n << " elements: " 
         << duration.count() << " microseconds\n"; 
 
    return 0; 
} 


OUTPUT:
g++ program.cpp -o my_program
./my_program     # On Linux/macOS

g++ 1.cpp -o 1 && ./1
