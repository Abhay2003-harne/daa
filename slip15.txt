Slip 15
Q.1) Write a program to implement to find out solution for 0/1 knapsack problem using LCBB (Least Cost Branch and Bound). 
Ans:
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

// Structure to represent an item with its value and weight
struct Item {
    int value, weight;
};

// Structure to represent a node in the search tree
struct Node {
    int level, profit, weight;
    float bound;
};

// Comparison function for priority queue (to get node with highest bound first)
bool operator<(Node a, Node b) {
    return a.bound < b.bound;
}

// Function to calculate the bound for a node
float calculateBound(Node u, int n, int W, vector<Item>& items) {
    if (u.weight >= W) {
        return 0;
    }
    
    float bound = u.profit;
    int j = u.level + 1;
    int totalWeight = u.weight;

    // Add items to the knapsack until the weight limit is reached
    while (j < n && totalWeight + items[j].weight <= W) {
        totalWeight += items[j].weight;
        bound += items[j].value;
        j++;
    }

    // Take the fraction of the next item if the knapsack is not full
    if (j < n) {
        bound += (W - totalWeight) * (float(items[j].value) / float(items[j].weight));
    }

    return bound;
}

// Function to find the maximum profit using LCBB
int knapsackLCBB(int W, vector<Item>& items, int n) {
    // Sort items by value/weight ratio in descending order
    sort(items.begin(), items.end(), [](Item a, Item b) {
        return (float(a.value) / float(a.weight)) > (float(b.value) / float(b.weight));
    });

    // Priority queue for the nodes, sorted by bound
    priority_queue<Node> pq;

    // Initializing the first node
    Node u, v;
    u.level = -1;
    u.profit = 0;
    u.weight = 0;
    u.bound = 0.0;

    // Calculate the bound for the first node
    u.bound = calculateBound(u, n, W, items);
    pq.push(u);

    int maxProfit = 0;

    // Loop to explore the tree
    while (!pq.empty()) {
        u = pq.top();
        pq.pop();

        // If this node's profit is greater than the maximum profit, update maxProfit
        if (u.profit > maxProfit) {
            maxProfit = u.profit;
        }

        // If this node cannot yield a better solution, skip it
        if (u.bound <= maxProfit) {
            continue;
        }

        // Generate the left child (including the current item)
        v.level = u.level + 1;
        v.weight = u.weight + items[v.level].weight;
        v.profit = u.profit + items[v.level].value;

        if (v.weight <= W && v.profit > maxProfit) {
            v.bound = calculateBound(v, n, W, items);
            if (v.bound > maxProfit) {
                pq.push(v);
            }
        }

        // Generate the right child (excluding the current item)
        v.weight = u.weight;
        v.profit = u.profit;
        v.bound = calculateBound(v, n, W, items);

        if (v.bound > maxProfit) {
            pq.push(v);
        }
    }

    return maxProfit;
}

int main() {
    int W, n;

    cout << "Enter the number of items: ";
    cin >> n;
    vector<Item> items(n);

    cout << "Enter the weight and value of each item:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> items[i].weight >> items[i].value;
    }

    cout << "Enter the maximum weight capacity of the knapsack: ";
    cin >> W;

    int maxProfit = knapsackLCBB(W, items, n);
    cout << "Maximum profit is: " << maxProfit << endl;

    return 0;
}
